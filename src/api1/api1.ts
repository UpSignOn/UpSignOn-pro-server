import express from 'express';

import { requestAccess } from './routes/requestAccess';
import { checkDevice } from './routes/checkDevice';
import { getData } from './routes/getData';
import { updateData } from './routes/updateData';
import { getConfig } from './routes/getConfig';
import { getUrlList } from './routes/getUrlList';
import { removeAuthorization } from './routes/removeAuthorization';
import { getAuthorizedDevices } from './routes/getAuthorizedDevices';
import { renameDevice } from './routes/renameDevice';
import { backupPassword } from './routes/backupPassword';
import { requestPasswordReset } from './routes/requestPasswordReset';
import { getPasswordBackup } from './routes/getPasswordBackup';
import { checkEmailAddressForSharing } from './routes/checkEmailAddressForSharing';
import { share } from './routes/share';
import { updateSharedItem } from './routes/updateSharedItem';
import { getContactsPublicKeys } from './routes/getContactsPublicKeys';
import { updateContactItemRights } from './routes/updateContactItemRights';
import { stopSharingWithContact } from './routes/stopSharingWithContact';
import { checkUserPublicKey } from './routes/checkUserPublicKey';
import { updateDeviceMetaData } from './routes/updateDeviceMetaData';
import { logUsage } from './routes/logUsage';
import { getMatchingEmailAddressesForSharing } from './routes/getMatchingEmailAddressesForSharing';
import { getContactsSharingItemsWithMe } from './routes/getContactsSharingItemsWithMe';
import { deleteSharing } from './routes/deleteSharing';
import { stopReceivingSharing } from './routes/stopReceivingSharing';
import { deleteSingledSharings } from './routes/deleteSingledSharings';
import { sendStats } from './routes/sendStats';
import { getContactsSharingItemsWithMeV2 } from './routes/getContactsSharingItemsWithMeV2';
import { createSharedFolder } from './routes/createSharedFolder';
import { addSharedItemsToSharedFolder } from './routes/addSharedItemsToSharedFolder';
import { changeSharedFolderName } from './routes/changeSharedFolderName';
import { getContactsForSharedFolder } from './routes/getContactsForSharedFolder';
import { updateContactSharedFolderRights } from './routes/updateContactSharedFolderRights';
import { stopSharingFolderWithContact } from './routes/stopSharingFolderWithContact';
import { getContactsForSharedItemV2 } from './routes/getContactsForSharedItemV2';
import { makeMyselfSoleManagerOfSharedFolder } from './routes/makeMyselfSoleManagerOfSharedFolder';
import { updateSharedFolderIdForSharedItem } from './routes/updateSharedFolderIdForSharedItem';
import { unshareItemsThatWereMovedFromSharedFolder } from './routes/unsharedItemsThatWereMovedFromSharedFolder';
import { migrateToCryptographicAuthentication } from './routes/migrateToCryptographicAuthentication';
import { getAuthenticationChallenges } from './routes/getAuthenticationChallenges';
import { authenticate } from './routes/authenticate';
import { addNewData } from './routes/addNewData';
import { disconnect } from './routes/disconnect';


export const api1Router = express.Router();

api1Router.all('/config', getConfig);
api1Router.post('/url-list', getUrlList);
api1Router.post('/migrate-to-cryptographic-authentication', migrateToCryptographicAuthentication);
api1Router.post('/get-authentication-challenges', getAuthenticationChallenges);
api1Router.post('/authenticate', authenticate);
api1Router.post('/disconnect', disconnect);
api1Router.post('/request-access', requestAccess);
api1Router.post('/check-device', checkDevice);
api1Router.post('/request-password-reset', requestPasswordReset);
api1Router.post('/remove-authorization', removeAuthorization);
api1Router.post('/get-authorized-devices', getAuthorizedDevices);
api1Router.post('/get-data', getData);
api1Router.post('/update-data', updateData);
api1Router.post('/add-new-data', addNewData);
api1Router.post('/rename-device', renameDevice);
api1Router.post('/backup-password', backupPassword);
api1Router.post('/get-password-backup', getPasswordBackup);
api1Router.post('/get-matching-email-addresses-for-sharing', getMatchingEmailAddressesForSharing);
api1Router.post('/get-contacts-sharing-items-with-me', getContactsSharingItemsWithMe);
api1Router.post('/get-contacts-sharing-items-with-me-v2', getContactsSharingItemsWithMeV2);
api1Router.post('/check-email-address-for-sharing', checkEmailAddressForSharing);
api1Router.post('/share', share);
api1Router.post('/create-shared-folder', createSharedFolder);
api1Router.post('/add-shared-items-to-shared-folder', addSharedItemsToSharedFolder);
api1Router.post('/update-shared-item', updateSharedItem);
api1Router.post('/get-contacts-public-keys', getContactsPublicKeys);
api1Router.post('/update-contact-rights', updateContactItemRights);
api1Router.post('/stop-sharing-with-contact', stopSharingWithContact);
api1Router.post('/delete-sharing', deleteSharing);
api1Router.post('/delete-singled-sharings', deleteSingledSharings);
api1Router.post('/stop-receiving-sharing', stopReceivingSharing);
api1Router.post('/get-contacts-for-shared-item-v2', getContactsForSharedItemV2);
api1Router.post('/check-user-public-key', checkUserPublicKey);
api1Router.post('/update-device-metadata', updateDeviceMetaData);
api1Router.post('/log-usage', logUsage);
api1Router.post('/send-stats', sendStats);
api1Router.post('/change-shared-folder-name', changeSharedFolderName);
api1Router.post('/get-contacts-for-shared-folder', getContactsForSharedFolder);
api1Router.post('/update-contact-shared-folder-rights', updateContactSharedFolderRights);
api1Router.post('/stop-sharing-folder-with-contact', stopSharingFolderWithContact);
api1Router.post('/make-myself-sole-manager-of-shared-folder', makeMyselfSoleManagerOfSharedFolder);
api1Router.post('/update-shared-folder-id-for-item', updateSharedFolderIdForSharedItem);
api1Router.post('/unshare-items-that-were-moved-from-shared-folder', unshareItemsThatWereMovedFromSharedFolder);
